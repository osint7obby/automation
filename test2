import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import pyautogui
import tkinter as tk
from tkinter import messagebox
from tkinter import PhotoImage
from PIL import Image, ImageDraw, ImageFont
import time
import datetime


#nie dziala - text wrapping rozwala program

# Text wrapping function
def wrap_text(text, draw, font, max_width):
    lines = []
    words = text.split()
    line = ""
    
    for word in words:
        width, _ = draw.textsize(line + word, font=font)
        if width > max_width:
            lines.append(line.strip())
            line = ""
        
        line += word + " "
    
    lines.append(line.strip())
    return lines

def scroll_and_screenshot(search_query):
    try:
        # Set up the Chrome webdriver
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')  # Uncomment to run Chrome in headless mode (no GUI)
        driver = webdriver.Chrome(options=options)
        

        # Google search
        search_url = 'https://www.google.com/search?q='
        driver.get(search_url + search_query + ' AND launder!'+'&num=25&start=0&sourceid=chrome&ie=UTF-8')

        # Wait for cookies policy overlay to appear and then dismiss it
        try:
            reject_button = driver.find_element(By.ID, "W0wltc")
            reject_button.click()
        except Exception as e:
            print(f"Error dismissing cookies overlay: {e}")


        
        func = lambda arg: driver.execute_script("return document.body.parentNode.scroll"+arg)
        driver.set_window_size( func("Width"), func ("Height"))
        screenshot_name = f'{search_query}_search.png'
        driver.find_element(By.TAG_NAME, "body").screenshot(screenshot_name)

        time.sleep(5)

        img = Image.open(screenshot_name)
        d = ImageDraw.Draw(img)
        font = ImageFont.load_default()
        
        url = driver.current_url
        current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        text = f"URL: {url}\nDate-Time: {current_time}"
        
        max_width = img.width // 4
        lines = wrap_text(text, d, font, max_width)
        
        y = 100  # Starting y-coordinate
        x = 0    # Starting x-coordinate
        
        for line in lines:
        d.text((x, y), line, font=font, fill=(255, 0, 0))
        text_width, text_height = d.textsize(line, font=font)  # Corrected this line
        y += text_height
        
        img.save(screenshot_name)

        driver.quit()

        print(f"Screenshot taken for search: '{search_query}' AND launder!")
    except Exception as e:
        print(f"Error occurred while processing search: '{search_query}'")
        print(e)
# Create the GUI

def search_button_click():
    search_query = entry.get()
    scroll_and_screenshot(search_query)

root = tk.Tk()
root.title('Google Search and Screenshot')
root.geometry('400x300')

# Load the background image
background_image = PhotoImage(file='your_image.png')  # Replace with the path to your background image

# Create a canvas and display the background image
canvas = tk.Canvas(root, width=400, height=300)
canvas.pack()
canvas.create_image(0, 0, anchor='nw', image=background_image)

frame = tk.Frame(root, padx=20, pady=20)
frame.place(relx=0.5, rely=0.5, anchor='center')

label = tk.Label(frame, text="Enter your search query:", font=('Arial', 12))
label.pack(pady=10)

entry = tk.Entry(frame, width=30, font=('Arial', 12))
entry.pack(pady=5)

search_button = tk.Button(frame, text="Search and Screenshot", command=search_button_click, width=20, bg='#4caf50', fg='white', font=('Arial', 12, 'bold'))
search_button.pack(pady=15)

def on_enter_key(event):
    search_button_click()

root.bind('<Return>', on_enter_key)

root.mainloop()



